<Module>
  <!-- ; ModuleID = 'array_array.o0.bc' -->
  <!-- source_filename = " array_array.c  "-->
  <!-- target datalayout = "e-p:32:32-i64:64-v16:16-v32:32-n16:32:64" -->
  <!-- target triple = "nvptx" -->
  <Globals>
    <Variable name="arr" Vtype="global" type="[10 x [10 x i32]]" init="[[10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], [10 x i32] [i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19], [10 x i32] [i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29], [10 x i32] [i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39], [10 x i32] [i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49], [10 x i32] [i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59], [10 x i32] [i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69], [10 x i32] [i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79], [10 x i32] [i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89], [10 x i32] [i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99]]" align="4" />
    <Variable name="c" Vtype="global" type="i32" init="0" align="4" />
  </Globals>

  <!-- Function Attrs: noinline nounwind -->
  <Function linkage="" mode="define" returnType="i32" name="array">
    <Arguments number="2">
      <Arg type="i32" name="i"/>
      <Arg type="i32" name="j"/>
    </Arguments>
    <BasicBlocks>
      <BasicBlock name="entry">
        <Instruction des="i.addr" opName="alloca"  allocaType="i32" align="4" />
        <Instruction des="j.addr" opName="alloca"  allocaType="i32" align="4" />
        <Instruction opName="store" operands="[i32]i,[i32*]i.addr" />
        <Instruction opName="store" operands="[i32]j,[i32*]j.addr" />
        <Instruction des="r-0" opName="load" loadType="i32" type="i32*" operands="c" />
        <Instruction des="inc" opName="add" type="i32" operands="r-0,1" />
        <Instruction opName="store" operands="[i32]inc,[i32*]c" />
        <Instruction des="r-1" opName="load" loadType="i32" type="i32*" operands="i.addr" />
        <Instruction des="arrayidx" opName="getelementptr" type="[10 x [10 x i32]]" operands="[[10 x [10 x i32]]*]arr,[i32]0,[i32]r-1" />
        <Instruction des="r-2" opName="load" loadType="i32" type="i32*" operands="j.addr" />
        <Instruction des="arrayidx1" opName="getelementptr" type="[10 x i32]" operands="[[10 x i32]*]arrayidx,[i32]0,[i32]r-2" />
        <Instruction des="r-3" opName="load" loadType="i32" type="i32*" operands="arrayidx1" />
        <Instruction opName="ret" operands="[i32]r-3" />
      </BasicBlock>
    </BasicBlocks>
  </Function>

  <!-- Function Attrs: noinline nounwind -->
  <Function linkage="" mode="define" returnType="i32" name="main">
    <Arguments number="0">
    </Arguments>
    <BasicBlocks>
      <BasicBlock name="entry">
        <Instruction des="retval" opName="alloca"  allocaType="i32" align="4" />
        <Instruction opName="store" operands="[i32]0,[i32*]retval" />
        <Instruction des="call" opName="call" functionType="i32" operands="array, [i32]0, [i32]1" />
        <Instruction des="call1" opName="call" functionType="i32" operands="array, [i32]2, [i32]3" />
        <Instruction des="add" opName="add" type="i32" operands="call,call1" />
        <Instruction des="call2" opName="call" functionType="i32" operands="array, [i32]4, [i32]5" />
        <Instruction des="add3" opName="add" type="i32" operands="add,call2" />
        <Instruction des="call4" opName="call" functionType="i32" operands="array, [i32]6, [i32]7" />
        <Instruction des="add5" opName="add" type="i32" operands="add3,call4" />
        <Instruction des="call6" opName="call" functionType="i32" operands="array, [i32]8, [i32]9" />
        <Instruction des="add7" opName="add" type="i32" operands="add5,call6" />
        <Instruction opName="ret" operands="[i32]add7" />
      </BasicBlock>
    </BasicBlocks>
  </Function>
</Module>